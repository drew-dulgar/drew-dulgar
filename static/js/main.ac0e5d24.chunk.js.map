{"version":3,"sources":["app/theme.js","app/reducers/index.js","app/store.js","app/components/layout/AppBar.js","app/screens/Main.js","app/Application.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","rootReducer","history","combineReducers","router","connectRouter","createBrowserHistory","routingMiddleware","routerMiddleware","middleware","thunk","enhancer","composeWithDevTools","applyMiddleware","apply","store","createStore","persistStore","useStyles","makeStyles","root","flexGrow","AppBar","classes","react_default","a","createElement","className","AppBar_AppBar","position","color","Toolbar","Typography","variant","Main","Fragment","layout_AppBar","Container","Application","StrictMode","CssBaseline","es","MuiThemeProvider","esm","screens_Main","Boolean","window","location","hostname","match","ReactDOM","render","app_Application","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEMA,EAAQC,YAAe,2DCKdC,EAJK,SAACC,GAAD,OAAaC,0BAAgB,CAC/CC,OAAQC,YAAcH,MCOlBA,EAAUI,cAGVC,EAAoBC,YAAiBN,GAGrCO,EAAa,CACjBC,IACAH,GAaII,EAAWC,8BACfC,kBAAeC,WAAf,EAAmBL,IAIfM,EAAQC,sBACZf,EAAYC,GACZS,MAIgBM,YAAaF,0CCnCzBG,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAoBCC,EAhBA,WACb,IAAMC,EAAUL,IAEhB,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQH,MACtBI,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWC,SAAS,SAASC,MAAM,WACjCN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAYC,QAAQ,KAAKH,MAAM,WAA/B,cCNKI,EAXF,WACX,OACEV,EAAAC,EAAAC,cAACF,EAAAC,EAAMU,SAAP,KACEX,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,2BCmBSC,EAjBK,WAClB,OACEd,EAAAC,EAAAC,cAACF,EAAAC,EAAMc,WAAP,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAU1B,MAAOA,GAEbS,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAkB3C,MAAOA,GACvByB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAiBzC,QAASA,GACxBsB,EAAAC,EAAAC,cAACkB,EAAD,WCNMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP3B,EAAAC,EAAAC,cAAC0B,EAAD,MACAC,SAASC,eAAe,gBD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ac0e5d24.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n\n});\n\nexport { theme };","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router'\n\nconst rootReducer = (history) => combineReducers({\n  router: connectRouter(history),\n});\n\nexport default rootReducer;","\nimport { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { routerMiddleware } from 'connected-react-router'\nimport { createBrowserHistory } from 'history';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport rootReducer from './reducers';\n\n// initialize history\nconst history = createBrowserHistory();\n\n// initialize middleware\nconst routingMiddleware = routerMiddleware(history);\n\n// collect the middlewares used\nconst middleware = [\n  thunk,\n  routingMiddleware\n];\n\n// add logging to non production environments\nif (process.env.NODE_ENV !== 'production') {\n  const loggerMiddleware = createLogger({\n    duration: true,\n    collapsed: true,\n    logErrors: true\n  });\n  middleware.push(loggerMiddleware);\n}\n\nconst enhancer = composeWithDevTools(\n  applyMiddleware(...middleware)\n);\n\n// create store\nconst store = createStore(\n  rootReducer(history),\n  enhancer\n);\n\n// persist store\nconst persistor = persistStore(store);\n\nexport { history, store, persistor };","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  AppBar as MuiAppBar,\n  Toolbar,\n  Typography\n} from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n});\n\nconst AppBar = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MuiAppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Photos\n          </Typography>\n        </Toolbar>\n      </MuiAppBar>\n    </div>\n  );\n};\n\nexport default AppBar;","import React from 'react';\nimport { Container } from '@material-ui/core';\nimport { AppBar } from '../components/layout';\n\nconst Main = () => {\n  return (\n    <React.Fragment>\n      <AppBar />\n      <Container>\n        Some stuff here?\n    </Container>\n    </React.Fragment>\n  );\n};\n\nexport default Main;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { CssBaseline } from '@material-ui/core';\nimport { theme } from './theme';\nimport { history, store, persistor } from './store';\nimport Main from './screens/Main';\n\nconst Application = () => {\n  return (\n    <React.StrictMode>\n      <CssBaseline />\n      <Provider store={store}>\n        \n          <MuiThemeProvider theme={theme}>\n            <ConnectedRouter history={history}>\n              <Main />\n            </ConnectedRouter>\n          </MuiThemeProvider>\n        \n      </Provider>\n    </React.StrictMode>\n  );\n}\n\nexport default Application;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Application from './app/Application';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Application />,\n  document.getElementById('application')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}